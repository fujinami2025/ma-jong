<!DOCTYPE html>
<html lang="ja">

<head>
  <meta charset="UTF-8" />
  <title>2人対戦麻雀（仮）</title>
  <style>
    body {
      font-family: sans-serif;
      text-align: center;
      margin-top: 30px;
    }

    #status {
      font-size: 1.5em;
      margin-bottom: 20px;
    }

    #discards-container {
      display: flex;
      flex-direction: column;
      align-items: center;
      margin-top: 20px;
    }

    .discards {
      display: flex;
      justify-content: center;
      margin: 6px 0;
    }

    #hand-display {
      margin-top: 12px;
      flex-direction: row;
    }
  </style>
</head>

<body>
  <div id="status">サーバーに接続中...</div>

  <div id="game" style="display: none;">
    <h2>対戦スタート！</h2>
    <p>あなたは <span id="player"></span> プレイヤーです。</p>
    <p>ルームID: <span id="room"></span></p>

    <div id="discards-container">
      <div id="opponent-discards" style="margin-bottom: 10px;"></div>
      <div id="my-discards" style="margin-bottom: 10px;"></div>
      <div id="hand-display"></div>
    </div>
    <button id="ron-button" style="display:none; margin-top:10px;">ロン</button>
    <button id="skip-button" style="display:none; margin-top:10px;">スキップ</button>
    <button id="tsumo-button" style="display:none; margin-top:10px;">ツモ</button>
    <button id="tsumoskip-button" style="display:none;">スキップ</button>
    <button id="riichi-button" style="display:none; margin-top:10px;">リーチ</button>
    <button id="cancel-riichi-button" style="display:none; margin-top:10px;">キャンセル</button>
  </div>

  <script>
    const statusDiv = document.getElementById('status');
    const gameDiv = document.getElementById('game');
    const playerSpan = document.getElementById('player');
    const roomSpan = document.getElementById('room');
    const handDiv = document.getElementById('hand-display');
    const opponentDiscards = document.getElementById('opponent-discards');
    const myDiscards = document.getElementById('my-discards');
    const ronButton = document.getElementById('ron-button');
    const skipButton = document.getElementById('skip-button');
    const tsumoButton = document.getElementById('tsumo-button');
    const tsumoskipButton = document.getElementById("tsumoskip-button");
    const riichiButton = document.getElementById('riichi-button');
    const canselButton = document.getElementById('cancel-riichi-button');

    let myPlayerIndex = null;
    let myRoomId = null;
    let canDiscard = false;
    let ronPendingPai = null;
    let skipRequested = false;
    let isRiichi = false;
    let tingpaiSet = new Set();
    let currentHandString = '';
    const protocol = location.protocol === 'https:' ? 'wss' : 'ws';

    const ws = new WebSocket(`${protocol}://${location.host}/ws`);

    ws.onopen = () => {
      statusDiv.textContent = '待機中… 他のプレイヤーを待っています。';
    };

    ws.onmessage = (event) => {
      const data = JSON.parse(event.data);

      if (data.type === 'reachable' && data.playerIndex === myPlayerIndex) {
        ws.send(JSON.stringify({
          type: 'log',
          message: '1!'
        }));
        document.getElementById('riichi-button').style.display = 'inline-block';
      }

      if (data.type === 'start') {
        statusDiv.style.display = 'none';
        gameDiv.style.display = 'block';
        myPlayerIndex = data.playerIndex;
        myRoomId = data.roomId;
        playerSpan.textContent = myPlayerIndex;
        roomSpan.textContent = myRoomId;

        currentHandString = data.handString || '';
        if (data.handString) showHandFromShoupaiString(data.handString);
      }

      if (data.type === 'tsumo') {
        if (data.playerIndex === myPlayerIndex) {
          currentHandString = data.handString || currentHandString;
          if (data.handString) showHandFromShoupaiString(data.handString);
          canDiscard = true;
        }
      }

      if (data.type === 'ronCheck') {
        // ユーザーにロンするかどうか選ばせる
        ronPendingPai = data.pai;
        showRonSkipButtons();
      }

      if (data.type === 'ron') {
        hideRonSkipButtons();
        if (data.winner === myPlayerIndex) {
          alert('🎉 あなたがロンしました！獲得牌: ' + convertMPSZToPaiIndex(data.pai));
        } else {
          alert('相手がロンしました。');
        }
      }


      if (data.type === 'tsumoCheck') {
        tsumoButton.style.display = 'inline-block';
        tsumoskipButton.style.display = 'inline-block';
        canDiscard = false; // まだ捨てられない（判定中）
      }

      if (data.type === 'tsumo' && data.winner !== undefined) {
        tsumoButton.style.display = 'none';
        ronButton.style.display = 'none';
        skipButton.style.display = 'none';
        if (data.winner === myPlayerIndex) {
          alert('🎉 ツモあがり！');
        } else {
          alert('相手がツモあがりました。');
        }
      }

      if (data.type === 'dahai') {
        if (data.playerIndex !== myPlayerIndex) {
          showOpponentDiscardedTile(data.pai);
        }
      }

      if (data.type === 'waiting') {
        statusDiv.textContent = `待機中… 現在 ${data.count} 人が待機しています。`;
      }
    };

    function showRonSkipButtons() {
      ronButton.style.display = 'inline-block';
      skipButton.style.display = 'inline-block';
    }

    function hideRonSkipButtons() {
      ronButton.style.display = 'none';
      skipButton.style.display = 'none';
    }

    function updateTileInteractivity() {
      console.log('動いてるよー');
      document.querySelectorAll('.tile').forEach(img => {
        const index = parseInt(img.dataset.index);
        if (isRiichi) {
          img.style.pointerEvents = tingpaiSet.has(index) ? 'auto' : 'none';
          img.style.opacity = tingpaiSet.has(index) ? '1.0' : '0.5';
        } else {
          img.style.pointerEvents = 'auto';
          img.style.opacity = '1.0';
        }
      });
    }

    riichiButton.onclick = () => {
      isRiichi = true;
      riichiButton.style.display = 'none';
      canselButton.style.display = 'inline-block';

      const shoupai = Majiang.Shoupai.fromString(currentHandString);
      const tingpai = Majiang.Util.tingpai(shoupai);
      tingpaiSet = new Set(tingpai.map(p => convertMPSZToPaiIndex(p)));

      // 有効牌のみアクティブに
      updateTileInteractivity();
    };

    // キャンセル
    canselButton.onclick = () => {
      isRiichi = false;
      canselButton.style.display = 'none';
      riichiButton.style.display = 'inline-block';
      tingpaiSet.clear();

      // 全牌を選択可能に戻す
      updateTileInteractivity();
    };


    ronButton.onclick = () => {
      if (ronPendingPai !== null) {
        ws.send(JSON.stringify({
          type: 'ron',
          roomId: myRoomId,
          playerIndex: myPlayerIndex,
          pai: ronPendingPai
        }));
        ronPendingPai = null;
      }
      hideRonSkipButtons();
    };

    tsumoButton.onclick = () => {
      tsumoButton.style.display = 'none';
      tsumoskipButton.style.display = 'none';

      ws.send(JSON.stringify({
        type: 'tsumo',
        roomId: myRoomId,
        playerIndex: myPlayerIndex
      }));
    };

    tsumoskipButton.onclick = () => {
      tsumoButton.style.display = 'none';
      tsumoskipButton.style.display = 'none';

      // ツモスキップ → 通常の打牌に移行
      canDiscard = true;
    };

    // スキップを押した場合
    skipButton.onclick = () => {
      hideRonSkipButtons();
      ws.send(JSON.stringify({
        type: 'skip',
        roomId: myRoomId,
        playerIndex: myPlayerIndex
      }));
      ronPendingPai = null;
    };

    function showHandFromShoupaiString(handStr) {
      currentHandString = handStr;
      console.log("🀄 再描画対象の手牌:", handStr);
      handDiv.innerHTML = 'あなたの手牌: ';
      let suit = '';

      for (let i = 0; i < handStr.length; i++) {
        const ch = handStr[i];
        if ('mpsz'.includes(ch)) {
          suit = ch;
        } else if (/\d/.test(ch)) {
          const tileStr = `${suit}${ch}`;
          const img = document.createElement('img');
          img.src = `/dist/image/${suit}${ch}.gif`;
          img.alt = tileStr;
          img.style.width = '40px';
          img.style.margin = '2px';
          img.style.cursor = 'pointer';

          img.classList.add('tile');
          img.dataset.index = convertMPSZToPaiIndex(tileStr);

          img.onclick = () => {
            console.log("クリックされました");
            if (!canDiscard) return;
            canDiscard = false;
            img.style.opacity = 0.5;
            img.style.pointerEvents = 'none';

            const paiIndex = convertMPSZToPaiIndex(tileStr);
            showMyDiscardedTile(paiIndex);

            ws.send(JSON.stringify({
              type: 'dahai',
              roomId: myRoomId,
              playerIndex: myPlayerIndex,
              pai: paiIndex
            }));
          };

          handDiv.appendChild(img);
        }
      }
      updateTileInteractivity();
    }

    function getTileImage(paiNumber) {
      const typeIndex = Math.floor(paiNumber / 4);
      if (typeIndex < 9) return `m${typeIndex + 1}.gif`;
      if (typeIndex < 18) return `p${typeIndex - 9 + 1}.gif`;
      if (typeIndex < 27) return `s${typeIndex - 18 + 1}.gif`;
      return `z${typeIndex - 27 + 1}.gif`;
    }

    function showOpponentDiscardedTile(pai) {
      if (opponentDiscards.children.length === 0) {
        opponentDiscards.innerHTML = '<p>相手の捨て牌:</p>';
      }
      const img = document.createElement('img');
      img.src = `/dist/image/${getTileImage(pai)}`;
      img.alt = `${pai}`;
      img.style.width = '40px';
      img.style.margin = '2px';
      opponentDiscards.appendChild(img);
    }

    function showMyDiscardedTile(pai) {
      if (myDiscards.children.length === 0) {
        myDiscards.innerHTML = '<p>あなたの捨て牌:</p>';
      }
      const img = document.createElement('img');
      img.src = `/dist/image/${getTileImage(pai)}`;
      img.alt = `${pai}`;
      img.style.width = '40px';
      img.style.margin = '2px';
      myDiscards.appendChild(img);
    }

    ws.onclose = () => {
      statusDiv.textContent = 'サーバーとの接続が切断されました。';
    };

    function convertMPSZToPaiIndex(paiStr) {
      const num = parseInt(paiStr[1]);
      const suit = paiStr[0];
      let base = 0;
      if (suit === 'p') base = 9;
      else if (suit === 's') base = 18;
      else if (suit === 'z') base = 27;
      const tileIndex = base + num - 1;
      return tileIndex * 4; // 常に0番目のインスタンス
    }

  </script>
</body>

</html>